#!/usr/bin/env node

'use strict';

const os = require('os');
const path = require('path');
const workerpool = require('workerpool');
const yargs = require('yargs');

main().catch(console.error);

async function main() {
  yargs
    .help('help', 'Show help.')
    .option('nosend', {
      describe: 'Do not send metrics.',
    })
    .option('pipeline', {
      describe: 'Path to the pipeline.',
      alias: 'p',
      default: './pipelines/reference.js',
    })
    .option('user', {
      describe: 'The username associated with the graph in Prometheus.',
      alias: 'u',
      default: os.userInfo().username
    })
    .option('node-min', {
      describe: 'Minimum nodes to simulate.',
      alias: 'n',
      default: 0,
    })
    .option('node-max', {
      describe: 'Maximum non-witness nodes to simulate.',
      alias: 'N',
      default: 0,
    })
    .option('node-increment', {
      describe: 'Non-witness node simulation step size.',
      alias: 'i',
      default: 10,
    })
    .options('f-min', {
      describe: 'Minimum byzantine failures to simulate.',
      alias: 'f',
      default: 1,
    })
    .options('f-max', {
      describe: 'Maximum byzantine failures to simulate.',
      alias: 'F',
      default: 1,
    });

  const {nosend, pipeline, user, nodeMin, nodeMax, nodeIncrement,
    fMin, fMax} = yargs.argv;
  const run = Date.now();

  const simulationPool = workerpool.pool(
    path.join(__dirname, 'simulation-worker.js'));

  setInterval(() => {
    const stats = simulationPool.stats();
    const time = new Date().toLocaleTimeString();
    if(stats.activeTasks < 1 && stats.pendingTasks < 1) {
      console.log(`${time}: Simulation complete.`);
      process.exit(1);
    }
    const totalTasks = stats.activeTasks + stats.pendingTasks;
    const totalWorkers = stats.totalWorkers - stats.idleWorkers;
    console.log(`${time}: ${stats.activeTasks}/${totalTasks} ` +
      `active tasks using ${totalWorkers} workers.`);
  }, 1000);

  const promises = [];
  for(let f = fMin; f <= fMax; f++) {
    for(let n = nodeMin; n <= nodeMax; n += nodeIncrement) {
      const simulationOptions = {
        nosend,
        pipelineJs: pipeline,
        user,
        run,
        witnessCount: (3 * f) + 1,
        nonwitnessCount: n
      };
      promises.push(simulationPool.exec('runSimulation', [simulationOptions]));
    }
  }

  await Promise.all(promises);

  simulationPool.terminate();
}
